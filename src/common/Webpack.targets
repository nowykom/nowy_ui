<Project>

  <Target Name="NodeInstall" Inputs="package.json" Outputs="$(NodeModulesStampFile)">
    <!--
        Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:

        <PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>
     -->
    <Exec Command="npm ci" Condition="'$(RestorePackagesWithLockFile)' == 'true'" />
    <Exec Command="npm install" Condition="'$(RestorePackagesWithLockFile)' != 'true'" />

    <!-- Write the stamp file, so incremental builds work -->
    <Touch Files="$(NodeModulesStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="NodeCompileFindFilesComponents" DependsOnTargets="NodeInstall">
    <ItemGroup>
      <_NodeCompileInputsComponents Include="Components\**\*.ts" />
      <_NodeCompileInputsComponents Include="Components\**\*.js" />
      <_NodeCompileInputsComponents Include="Components\**\*.scss" />
    </ItemGroup>
    <Message Text="_NodeCompileInputsComponents: @(_NodeCompileInputsComponents)" />
  </Target>

  <Target Name="NodeCompileFindFilesServices" DependsOnTargets="NodeInstall">
    <ItemGroup>
      <_NodeCompileInputsServices Include="Services\**\*.ts" />
      <_NodeCompileInputsServices Include="Services\**\*.js" />
      <_NodeCompileInputsServices Include="Services\**\*.scss" />
    </ItemGroup>
    <Message Text="_NodeCompileInputsServices: @(_NodeCompileInputsServices)" />
  </Target>

  <Target Name="NodeCompileFindFilesResources" DependsOnTargets="NodeInstall">
    <ItemGroup>
      <_NodeCompileInputsResources Include="resources\**\*.ts" />
      <_NodeCompileInputsResources Include="resources\**\*.js" />
      <_NodeCompileInputsResources Include="resources\**\*.scss" />
    </ItemGroup>
    <Message Text="_NodeCompileInputsResources: @(_NodeCompileInputsResources)" />
  </Target>

  <Target Name="NodeCompileComponents" DependsOnTargets="NodeCompileFindFilesComponents" Inputs="@(_NodeCompileInputsComponents)" Outputs="$(NodeCompileComponentsStampFile)">
    <Copy SourceFiles="..\common\tsconfig.razor.json" DestinationFolder="." SkipUnchangedFiles="true" />
    <Exec Command="npx tsc -p tsconfig.razor.json" />

    <MakeDir Directories="$(NodeCompileStampDirectory)" />
    <Touch Files="$(NodeCompileComponentsStampFile)" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(NodeCompileComponentsStampFile)" />
    </ItemGroup>
  </Target>

  <Target Name="NodeCompileServices" DependsOnTargets="NodeCompileFindFilesServices" Inputs="@(_NodeCompileInputsServices)" Outputs="$(NodeCompileServicesStampFile)">
    <Copy SourceFiles="..\common\tsconfig.services.json" DestinationFolder="." SkipUnchangedFiles="true" />
    <Exec Command="npx tsc -p tsconfig.services.json" />

    <MakeDir Directories="$(NodeCompileStampDirectory)" />
    <Touch Files="$(NodeCompileServicesStampFile)" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(NodeCompileServicesStampFile)" />
    </ItemGroup>
  </Target>

  <Target Name="NodeCompileResources" DependsOnTargets="NodeCompileFindFilesResources" Inputs="@(_NodeCompileInputsResources)" Outputs="$(NodeCompileResourcesStampFile)">
    <Copy SourceFiles="..\common\tsconfig.webpack.json" DestinationFolder="." SkipUnchangedFiles="true" />
    <Copy SourceFiles="..\common\webpack.config.js" DestinationFolder="." SkipUnchangedFiles="true" />
    <Exec Command="npx webpack --config webpack.config.js" />

    <MakeDir Directories="$(NodeCompileStampDirectory)" />
    <Touch Files="$(NodeCompileResourcesStampFile)" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(NodeCompileResourcesStampFile)" />
    </ItemGroup>
  </Target>

  <Target Name="NodeCompile" DependsOnTargets="NodeCompileComponents;NodeCompileServices;NodeCompileResources">
  </Target>

</Project>
